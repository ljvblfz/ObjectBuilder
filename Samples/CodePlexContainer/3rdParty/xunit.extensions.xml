<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.extensions</name>
    </assembly>
    <members>
        <member name="T:Xunit.Extensions.AutoRollbackAttribute">
            <summary>
            Apply this attribute to your test method to automatically create a
            <see cref="T:System.Transactions.TransactionScope"/> that is rolled back when the test is
            finished.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.AutoRollbackAttribute.After(System.Reflection.MethodInfo)">
            <summary>
            Rolls back the transaction.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.AutoRollbackAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
            Creates the transaction.
            </summary>
        </member>
        <member name="P:Xunit.Extensions.AutoRollbackAttribute.IsolationLevel">
            <summary>
            Gets or sets the isolation level of the transaction.
            Default value is <see cref="P:Xunit.Extensions.AutoRollbackAttribute.IsolationLevel"/>.Unspecified.
            </summary>
        </member>
        <member name="P:Xunit.Extensions.AutoRollbackAttribute.ScopeOption">
            <summary>
            Gets or sets the scope option for the transaction.
            Default value is <see cref="T:System.Transactions.TransactionScopeOption"/>.Required.
            </summary>
        </member>
        <member name="P:Xunit.Extensions.AutoRollbackAttribute.TimeoutInMS">
            <summary>
            Gets or sets the timeout of the transaction, in milliseconds.
            By default, the transaction will not timeout.
            </summary>
        </member>
        <member name="T:Xunit.Extensions.DataAttribute">
            <summary>
            Abstract attribute which represents a data source for a data theory.
            Data source providers derive from this attribute and implement GetDataTable
            to return the data for the theory.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.DataAttribute.GetDataTable(System.Reflection.MethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <param name="methodUnderTest">The method that is being tested</param>
            <returns>The theory data, in table form</returns>
        </member>
        <member name="T:Xunit.Extensions.DataViaOleDbAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from an OLEDB connection.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.DataViaOleDbAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Extensions.DataViaOleDbAttribute"/>.
            </summary>
            <param name="connectionString">The OLEDB connection string to the data</param>
            <param name="selectStatement">The SELECT statement used to return the data for the theory</param>
        </member>
        <member name="M:Xunit.Extensions.DataViaOleDbAttribute.GetDataTable(System.Reflection.MethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <param name="methodUnderTest">The method that is being tested</param>
            <returns>The theory data, in table form</returns>
        </member>
        <member name="T:Xunit.Extensions.DataViaPropertyAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from a public static property on the test class.
            The property must return a <see cref="T:System.Data.DataTable"/> with the test data.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.DataViaPropertyAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Extensions.DataViaPropertyAttribute"/>/
            </summary>
            <param name="propertyName">The name of the public static property on the test class that will provide the test data</param>
        </member>
        <member name="M:Xunit.Extensions.DataViaPropertyAttribute.GetDataTable(System.Reflection.MethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <param name="methodUnderTest">The method that is being tested</param>
            <returns>The theory data, in table form</returns>
        </member>
        <member name="T:Xunit.Extensions.DataViaSqlServerAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming a Microsoft SQL Server.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.DataViaSqlServerAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Extensions.DataViaSqlServerAttribute"/>, using a trusted connection.
            </summary>
            <param name="serverName">The server name of the Microsoft SQL Server</param>
            <param name="databaseName">The database name</param>
            <param name="selectStatement">The SQL SELECT statement to return the data for the data theory</param>
        </member>
        <member name="M:Xunit.Extensions.DataViaSqlServerAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Extensions.DataViaSqlServerAttribute"/>, using the provided username and password.
            </summary>
            <param name="serverName">The server name of the Microsoft SQL Server</param>
            <param name="databaseName">The database name</param>
            <param name="username">The username for the server</param>
            <param name="password">The password for the server</param>
            <param name="selectStatement">The SQL SELECT statement to return the data for the data theory</param>
        </member>
        <member name="T:Xunit.Extensions.DataViaXlsAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming a Microsoft Excel (.xls) spreadsheet.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.DataViaXlsAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Extensions.DataViaXlsAttribute"/>.
            </summary>
            <param name="filename">The filename of the XLS spreadsheet file; if the filename provided
            is relative, then it is relative to the location of xunit.extensions.dll.</param>
            <param name="selectStatement">The SELECT statement that returns the data for the theory</param>
        </member>
        <member name="T:Xunit.Extensions.NUnitCommand">
            <summary>
            Represents the execution of an NUnit test fixture.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.NUnitCommand.ChooseNextTest(System.Collections.Generic.ICollection{System.Reflection.MethodInfo})">
            <summary>
            Allows the test class command to choose the next test to be run from the list of
            tests that have not yet been run, thereby allowing it to choose the run order.
            </summary>
            <param name="testsLeftToRun">The tests remaining to be run</param>
            <returns>The index of the test that should be run</returns>
        </member>
        <member name="M:Xunit.Extensions.NUnitCommand.ClassFinish">
            <summary>
            Execute actions to be run after all the test methods of this test class are run.
            </summary>
            <returns>Returns the <see cref="T:System.Exception"/> thrown during execution, if any; null, otherwise</returns>
        </member>
        <member name="M:Xunit.Extensions.NUnitCommand.ClassStart">
            <summary>
            Execute actions to be run before any of the test methods of this test class are run.
            </summary>
            <returns>Returns the <see cref="T:System.Exception"/> thrown during execution, if any; null, otherwise</returns>
        </member>
        <member name="M:Xunit.Extensions.NUnitCommand.EnumerateTestCommands(Xunit.Sdk.IMethodInfo)">
            <summary>
            Enumerates the test commands for a given test method in this test class.
            </summary>
            <param name="testMethod">The method under test</param>
            <returns>The test commands for the given test method</returns>
        </member>
        <member name="M:Xunit.Extensions.NUnitCommand.EnumerateTestMethods">
            <summary>
            Enumerates the methods which are test methods in this test class.
            </summary>
            <returns>The test methods</returns>
        </member>
        <member name="M:Xunit.Extensions.NUnitCommand.IsTestMethod(Xunit.Sdk.IMethodInfo)">
            <summary>
            Determines if a given <see cref="T:Xunit.Sdk.IMethodInfo"/> refers to a test method.
            </summary>
            <param name="testMethod">The test method to validate</param>
            <returns>True if the method is a test method; false, otherwise</returns>
        </member>
        <member name="P:Xunit.Extensions.NUnitCommand.ObjectUnderTest">
            <summary>
            Gets the object instance that is under test. May return null if you wish
            the test framework to create a new object instance for each test method.
            </summary>
        </member>
        <member name="P:Xunit.Extensions.NUnitCommand.TypeUnderTest">
            <summary>
            Sets the type that is being tested
            </summary>
        </member>
        <member name="T:Xunit.Extensions.ResultMapper">
            <summary>
            Internal class for <see cref="T:Xunit.Extensions.RunWithNUnitAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.ResultMapper.MapTestCaseResult(NUnit.Core.TestCaseResult)">
            <summary/>
        </member>
        <member name="T:Xunit.Extensions.RunWithNUnitAttribute">
            <summary>
            Tells the xUnit.net runner that the class contains NUnit 2.x unit tests. The tests
            are run with the installed version of NUnit on the machine.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.RunWithNUnitAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Extensions.RunWithNUnitAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Extensions.TheoryAttribute">
            <summary>
            Marks a test method as being a data theory. Data theories are tests which are fed
            various bits of data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed
            multiple times (once with each data row).
            </summary>
        </member>
        <member name="M:Xunit.Extensions.TheoryAttribute.EnumerateTestCommands(System.Reflection.MethodInfo)">
            <summary>
            Creates instances of <see cref="T:Xunit.Extensions.TheoryCommand"/> which represent individual intended
            invocations of the test method, one per data row in the data source.
            </summary>
            <param name="method">The method under test</param>
            <returns>An enumerator through the desired test method invocations</returns>
        </member>
        <member name="T:Xunit.Extensions.TheoryCommand">
            <summary>
            Represents a single invocation of a data theory test method.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.TheoryCommand.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Extensions.TheoryCommand"/>.
            </summary>
            <param name="testMethod">The method under test</param>
            <param name="parameters">The parameters to be passed to the test method</param>
        </member>
        <member name="M:Xunit.Extensions.TheoryCommand.Execute(System.Object)">
            <summary>
            Executes the test method
            </summary>
            <returns>Returns information about the test run</returns>
        </member>
        <member name="P:Xunit.Extensions.TheoryCommand.Parameters">
            <summary>
            Gets the parameters that are passed to the test command.
            </summary>
        </member>
    </members>
</doc>
