<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Dev\DependencyInjection\ObjectBuilder\Tests.ObjectBuilder\bin\Release\Tests.ObjectBuilder.dll" total="100" failures="0" not-run="0" date="2007-08-29" time="10:09:13">
  <environment nunit-version="2.2.10.0" clr-version="2.0.50727.1378" os-version="Microsoft Windows NT 5.1.2600 Service Pack 2" platform="Win32NT" cwd="C:\Dev\DependencyInjection\ObjectBuilder" machine-name="BRADWILS-VMXP" user="bradwils" user-domain="REDMOND" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite name="C:\Dev\DependencyInjection\ObjectBuilder\Tests.ObjectBuilder\bin\Release\Tests.ObjectBuilder.dll" success="True" time="0.250" asserts="0">
    <results>
      <test-suite name="C:\Dev\DependencyInjection\ObjectBuilder\Tests.ObjectBuilder\bin\Release\Tests.ObjectBuilder.dll" success="True" time="0.234" asserts="0">
        <results>
          <test-suite name="ObjectBuilder" success="True" time="0.234" asserts="0">
            <results>
              <test-suite name="BuilderAwareStrategyTest" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.BuilderAwareStrategyTest.BuildCallsClassWithInterface" executed="True" success="True" time="0.031" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderAwareStrategyTest.BuildChecksConcreteTypeAndNotRequestedType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderAwareStrategyTest.BuildIgnoresClassWithoutInterface" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderAwareStrategyTest.TearDownCallsClassWithInterface" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderAwareStrategyTest.TearDownIgnoresClassWithoutInterface" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="BuilderTest+BuildUp" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.BuilderTest+BuildUp.EmptyStrategies" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderTest+BuildUp.NullStrategies" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderTest+BuildUp.PoliciesSetDuringBuildUpDoNotPersistAfterBuildUpComplete" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderTest+BuildUp.StrategyStagesRunInProperOrder" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="BuilderTest+TearDown" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.BuilderTest+TearDown.EmptyStrategies" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderTest+TearDown.NullItem" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderTest+TearDown.NullStrategies" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuilderTest+TearDown.StrategiesRunInReverseOrder" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="BuildKeyMappingPolicyTest" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.BuildKeyMappingPolicyTest.PolicyReturnsNewBuildKey" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="BuildKeyMappingStrategyTest" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.BuildKeyMappingStrategyTest.CanMakeArbitraryKeysToConcreteTypes" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuildKeyMappingStrategyTest.CanMapGenericsWithIdenticalGenericParameters" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.BuildKeyMappingStrategyTest.CanMapInterfacesToConcreteTypes" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="LifetimeContainerTest" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.LifetimeContainerTest.CanDetermineIfLifetimeContainerContainsObject" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LifetimeContainerTest.CanEnumerateItemsInContainer" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LifetimeContainerTest.ContainerEnsuresObjectsWontBeCollected" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.LifetimeContainerTest.DisposingContainerDisposesOwnedObjects" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LifetimeContainerTest.DisposingItemsFromContainerDisposesInReverseOrderAdded" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LifetimeContainerTest.RemovingItemsFromContainerDoesNotDisposeThem" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LifetimeContainerTest.RemovingNonContainedItemDoesNotThrow" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="LocatorTest" success="True" time="0.062" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.LocatorTest.AddingToSameKeyTwiceThrows" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.AskingForAnUnregisterdObjectReturnsNull" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.AskingParentStopsAsSoonAsWeFindAMatch" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanAddSameObjectTwiceWithDifferentKeys" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanCallContainsThroughParent" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanEnumerate" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanFindByPredicate" executed="True" success="True" time="0.031" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanFindOutIfContainsAKey" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanRegisterObjectByName" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanRegisterObjectByType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanRegisterObjectByTypeAndID" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CanRegisterTwoObjectsWithDifferentKeys" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.CountReturnsNumberOfKeysWithLiveValues" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.DefaultBehaviorIsAskingParent" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.DefaultFindByBehaviorIsAskParent" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.FindingByPredicateCanClimbTheTree" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.FindingByPredicateCanFindsResultsFromBothParentAndChild" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.FindingByPredicateReturnsClosestResultsOnDuplicateKey" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.GetCanAskParentLocatorForAnObject" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.LocatorIsNotReadOnly" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.NullKeyOnAddThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.NullKeyOnContainsThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.NullKeyOnGetThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.NullKeyOnRemoveThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.NullPredicateOnFindByThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.NullValueOnAddThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.RegisteringAnObjectWithTwoKeysAndRemovingOneKeyLeavesTheOtherOneInTheLocator" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.RegistrationDoesNotPreventGarbageCollection" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.RemovingANonExistantKeyDoesntThrow" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.RemovingOneObjectDoesntAffectOtherObjects" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.RetrievingARemovedObjectReturnsNull" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.LocatorTest.TripleNestedLocators" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="PolicyListTest" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.PolicyListTest.CanAddMultiplePoliciesToBagAndRetrieveThem" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.CanAddPolicyToBagAndRetrieveIt" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.CanClearAllPolicies" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.CanClearDefaultPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.CanClearPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.CanGetLocalPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.CanRegisterGenericPolicyAndRetrieveWithSpecificGenericInstance" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.DefaultPolicyUsedWhenSpecificPolicyIsntAvailable" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.OuterPolicyDefaultOverridesInnerPolicyDefault" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.OuterPolicyOverridesInnerPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.SetOverwritesExistingPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.SpecificGenericPolicyComesBeforeGenericPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.SpecificInnerPolicyOverridesDefaultOuterPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.SpecificPolicyOverridesDefaultPolicy" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.WillAskInnerPolicyListWhenOuterHasNoAnswer" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.PolicyListTest.WillUseInnerDefaultPolicyWhenOuterHasNoAnswer" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="ReadOnlyLocatorTest" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.ReadOnlyLocatorTest.CanEnumerateItemsInReadOnlyLocator" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.ReadOnlyLocatorTest.CannotCastAReadOnlyLocatorToAReadWriteLocator" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.ReadOnlyLocatorTest.GenericGetEnforcesDataType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.ReadOnlyLocatorTest.ItemsContainedInLocatorContainedInReadOnlyLocator" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.ReadOnlyLocatorTest.NullInnerLocatorThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.ReadOnlyLocatorTest.ParentLocatorOfReadOnlyLocatorIsAlsoReadOnly" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.ReadOnlyLocatorTest.ReadOnlyLocatorCountReflectsInnerLocatorCount" executed="True" success="True" time="0.031" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="SingletonStrategyTest" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.SingletonStrategyTest.BuildingASingletonTwiceReturnsSameInstance" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.SingletonStrategyTest.ChildLocatorBeforeParent" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.SingletonStrategyTest.SearchesParentLocator" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="StagedStrategyChainTest" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.StagedStrategyChainTest.InnerStrategiesComeBeforeOuterStrategiesInStrategyChain" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.StagedStrategyChainTest.OrderingAcrossStagesForStrategyChain" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="WeakRefDictionaryTest" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.AddingToSameKeyTwiceAlwaysThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.AskingForAKeyThatDoesntExistThrows" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CanAddItemAfterPreviousItemIsCollected" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CanAddSameObjectTwiceWithDifferentKeys" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CanEnumerate" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CanFindOutIfContainsAKey" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CanRegisterObjectAndFindItByID" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CanRegisterTwoObjectsAndGetThemBoth" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CanRemoveAnObjectThatWasAlreadyAdded" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.CountReturnsNumberOfKeysWithLiveValues" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.KeyCanBeOfArbitraryType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.NullIsAValidValue" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.RegistrationDoesNotPreventGarbageCollection" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.RemovingAKeyDoesNotAffectOtherKeys" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.RemovingAKeyOfOneObjectDoesNotAffectOtherKeysForSameObject" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.WeakRefDictionaryTest.RemovingANonExistantKeyDoesntThrow" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>