<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Dev\DependencyInjection\ObjectBuilder\Tests.ObjectBuilder.Interception\bin\Release\Tests.ObjectBuilder.Interception.dll" total="90" failures="0" not-run="0" date="2007-08-29" time="10:09:16">
  <environment nunit-version="2.2.10.0" clr-version="2.0.50727.1378" os-version="Microsoft Windows NT 5.1.2600 Service Pack 2" platform="Win32NT" cwd="C:\Dev\DependencyInjection\ObjectBuilder" machine-name="BRADWILS-VMXP" user="bradwils" user-domain="REDMOND" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite name="C:\Dev\DependencyInjection\ObjectBuilder\Tests.ObjectBuilder.Interception\bin\Release\Tests.ObjectBuilder.Interception.dll" success="True" time="0.499" asserts="0">
    <results>
      <test-suite name="C:\Dev\DependencyInjection\ObjectBuilder\Tests.ObjectBuilder.Interception\bin\Release\Tests.ObjectBuilder.Interception.dll" success="True" time="0.499" asserts="0">
        <results>
          <test-suite name="ObjectBuilder" success="True" time="0.452" asserts="0">
            <results>
              <test-suite name="HandlerPipelineTest" success="True" time="0.047" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.HandlerPipelineTest.NoHandlersCallsTarget" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.HandlerPipelineTest.NullHandlerLists" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.HandlerPipelineTest.OneHandler" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.HandlerPipelineTest.TwoHandlers" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterceptionReflectorTest+MixedInterception" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+MixedInterception.CanMixInterceptionTypes" executed="True" success="True" time="0.016" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterceptionReflectorTest+NoInterceptionType" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+NoInterceptionType.ClassWithNoDecorations" executed="True" success="True" time="0.016" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterceptionReflectorTest+ViaInterface" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.CanAddHandlersInInheritedClass" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.InterceptionIsInherited" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.NonPublicInterfaceNotCompatible" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.OneInterceptedMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.ReflectShouldHappenOnGenericBaseClass" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.RequestingToBuildInterface1WillNotInterceptedInterface2Methods" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.RequestingToBuildNonInterfaceMeansMethodsNotIntercepted" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.TwoAttributesOnOneMethod" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaInterface.TwoInterceptedMethods" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterceptionReflectorTest+ViaRemoting" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaRemoting.CanAddHandlersInInheritedClass" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaRemoting.InterceptionIsInherited" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaRemoting.NonMBROTypeIncompatibleWithRemoting" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaRemoting.OneInterceptedMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaRemoting.TwoAttributesOnOneMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaRemoting.TwoInterceptedMethods" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterceptionReflectorTest+ViaVirtualMethod" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.CanAddHandlersInInheritedClass" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.InterceptionIsInherited" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.NonPublicTypesNotCompatible" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.NonVirtualMethodNotCompatible" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.OneInterceptedMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.ReflectShouldHappenOnGenericBaseClass" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.SealedTypeNotCompatible" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.TwoAttributesOnOneMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.TwoInterceptedMethods" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.InterceptionReflectorTest+ViaVirtualMethod.VirtualSealedMethodNotCompatible" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterfaceInterceptorTest+FindMethod" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+FindMethod.GenericClassGenericMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+FindMethod.GenericClassGenericMethodWithExtraGenerics" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+FindMethod.GenericClassNonGenericMethod" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+FindMethod.MethodNotFound" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+FindMethod.NonGenericClass" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+FindMethod.Overloads" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+FindMethod.ParameterTypesNotMatching" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterfaceInterceptorTest+GenericClasses" success="True" time="0.047" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+GenericClasses.GenericMethod" executed="True" success="True" time="0.031" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+GenericClasses.NonGenericMethod" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+GenericClasses.ReturnsDataOfGenericType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+GenericClasses.WhereClauseOnInterface" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterfaceInterceptorTest+GenericMethods" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+GenericMethods.GenericMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+GenericMethods.ReturnsDataOfGenericType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+GenericMethods.WhereClauseOnMethod" executed="True" success="True" time="0.016" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterfaceInterceptorTest+InParameters" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+InParameters.InReferenceParameter" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+InParameters.InValueParameter" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterfaceInterceptorTest+OutParameters" success="True" time="0.047" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+OutParameters.OutComplexValueType" executed="True" success="True" time="0.031" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+OutParameters.OutDouble" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+OutParameters.OutInt16" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+OutParameters.OutInt32" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+OutParameters.OutInt64" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+OutParameters.OutReferenceType" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterfaceInterceptorTest+RefParameters" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+RefParameters.RefClassParameter" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+RefParameters.RefValueType" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="InterfaceInterceptorTest+ReturnValues" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+ReturnValues.Exception" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+ReturnValues.NoReturnValue" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+ReturnValues.ReturnsClassType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.InterfaceInterceptorTest+ReturnValues.ReturnsValueType" executed="True" success="True" time="0.016" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="MethodInvocationTest" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.MethodInvocationTest.ShouldBeAbleToChangeInputs" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="RemotingInterceptorTest" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.RemotingInterceptorTest.CanInterceptClassDerivedFromMBRO" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.RemotingInterceptorTest.CanInterceptInterface" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.RemotingInterceptorTest.Exceptions" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.RemotingInterceptorTest.InterceptorCanInfluenceParameters" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.RemotingInterceptorTest.PassesParameters" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.RemotingInterceptorTest.ShortCircuit" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="VirtualInterceptorTest+Errors" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+Errors.CannotInterceptNonPublicClass" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+Errors.CannotInterceptSealedClass" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="VirtualInterceptorTest+GenericClasses" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+GenericClasses.GenericMethod" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+GenericClasses.NonGenericMethod" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+GenericClasses.ReturnsDataOfGenericType" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+GenericClasses.WhereClauseOnClass" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="VirtualInterceptorTest+GenericMethods" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+GenericMethods.GenericMethod" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+GenericMethods.ReturnsDataOfGenericType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+GenericMethods.WhereClauseOnMethod" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="VirtualInterceptorTest+InParameters" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+InParameters.OneParameter" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+InParameters.TwentyParameters" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+InParameters.TwoParameters" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="VirtualInterceptorTest+OutParameters" success="True" time="0.031" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+OutParameters.OutComplexValueType" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+OutParameters.OutDouble" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+OutParameters.OutInt16" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+OutParameters.OutInt32" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+OutParameters.OutInt64" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+OutParameters.OutReferenceType" executed="True" success="True" time="0.016" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="VirtualInterceptorTest+RefParameters" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+RefParameters.RefClassParameter" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+RefParameters.RefValueType" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
              <test-suite name="VirtualInterceptorTest+ReturnValues" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+ReturnValues.Exception" executed="True" success="True" time="0.016" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+ReturnValues.NoReturnValue" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+ReturnValues.ReturnsClassType" executed="True" success="True" time="0.000" asserts="0" />
                  <test-case name="ObjectBuilder.VirtualInterceptorTest+ReturnValues.ReturnsValueType" executed="True" success="True" time="0.000" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>